<Page x:Class="SampleMVVM.Views.ListMusicPage"
      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
      xmlns:local="clr-namespace:SampleMVVM.Views" xmlns:i="http://schemas.microsoft.com/xaml/behaviors" xmlns:viewmodels="clr-namespace:SampleMVVM.ViewModels"
      mc:Ignorable="d" 
      xmlns:custom="clr-namespace:CustomControls.Controls;assembly=CustomControls" xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
      d:DesignHeight="450" d:DesignWidth="800"
      Title="ListMusicPage">

    <Page.Resources>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    </Page.Resources>
    <Border  CornerRadius="12">
        <Border.BorderBrush>
            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                <GradientStop Color="#462AD8" Offset="0"/>
                <GradientStop Color="#DA34AE" Offset="0.75"/>
                <GradientStop Color="#8A16C1" Offset="1"/>
            </LinearGradientBrush>
        </Border.BorderBrush>

        <Grid>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="100*"/>
                    <ColumnDefinition Width="20*"/>
                </Grid.ColumnDefinitions>
                <ListBox HorizontalContentAlignment="Stretch" Visibility="{Binding CheckAdmin, Converter={StaticResource BooleanToVisibilityConverter}}"  Grid.Column="0" ItemsSource="{Binding ListMusicShow}" Style="{DynamicResource ListViewStyle}"  SelectedItem="{Binding SelectedSongs, Mode=TwoWay}" >
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel HorizontalAlignment="Stretch">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="120"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Image Source="{Binding Path=ImagePath}" Height="80" Width="80" Grid.Column="0"/>
                                    <Grid Grid.Column="1"
                                      HorizontalAlignment="Stretch">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid Grid.Column="0">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="40*"/>
                                                <RowDefinition Height="40*"/>
                                                <RowDefinition Height="40*"/>
                                                <RowDefinition Height="40*"/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="360"/>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="100"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Grid.Row="0" Grid.Column="0"  Text="{Binding Path=Name}" Style="{DynamicResource TextH1}" />
                                            <TextBlock Grid.Row="1" Grid.Column="0" Text="{Binding Path=Artist}" Style="{DynamicResource TitlePlayList}"/>
                                            <TextBlock Grid.Row="2" Grid.Column="0" Text="{Binding Path=Duration}"  Style="{DynamicResource ColVo}" />
                                            
                                            <Button Grid.Column="2" Grid.Row="0"    Command="{Binding DataContext.Delete, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" 
                                                CommandParameter="{Binding Id}" IsEnabled="{Binding DataContext.CanDeleteItem  , RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"
                                                Style="{DynamicResource But}">
                                                <materialDesign:PackIcon Kind="DeleteCircle" Style="{DynamicResource AddCircleIconStyleDelete}" IsEnabled="{Binding DataContext.CanDeleteItem  , RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                            </Button>

                                            <Button  Grid.Column="2" Grid.Row="1"  Style="{DynamicResource But}"   Command="{Binding DataContext.IOpenNewWindows, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" 
                                                     CommandParameter="{Binding Id}" IsEnabled="{Binding DataContext.CanDeleteItem  , RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                                                <materialDesign:PackIcon Kind="Edit" Style="{DynamicResource AddCircleIconStyle}" IsEnabled="{Binding DataContext.CanDeleteItem  , RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                            </Button>

                                            <Button  Grid.Column="2" Grid.Row="2"  Style="{DynamicResource But}" Command="{Binding DataContext.Description, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" 
                                                     CommandParameter="{Binding Id}" IsEnabled="{Binding DataContext.CanDeleteItem  , RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                                                <materialDesign:PackIcon Kind="AboutCircle" Style="{DynamicResource AddCircleIconStyle}" IsEnabled="{Binding DataContext.CanDeleteItem  , RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}"/>
                                            </Button>
                                        </Grid>
                                    </Grid>
                                </Grid>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDoubleClick">
                            <i:InvokeCommandAction Command="{Binding DoubleClickCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ListBox>


                <ListBox  HorizontalContentAlignment="Stretch" Visibility="{Binding CheckUser, Converter={StaticResource BooleanToVisibilityConverter}}" Grid.Column="0" ItemsSource="{Binding ListMusicShow}" Style="{DynamicResource ListViewStyle}" SelectedItem="{Binding SelectedSongs, Mode=TwoWay}" >
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel HorizontalAlignment="Stretch">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="120"/>
                                        <ColumnDefinition/>
                                    </Grid.ColumnDefinitions>
                                    <Image Source="{Binding Path=ImagePath}" Height="70" Width="70" Grid.Column="0"/>
                                    <Grid Grid.Column="1"
                                      HorizontalAlignment="Stretch">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid Grid.Column="0">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="40*"/>
                                                <RowDefinition Height="40*"/>
                                                <RowDefinition Height="40*"/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="360"/>
                                                <ColumnDefinition/>
                                                <ColumnDefinition Width="100"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Grid.Row="0" Grid.Column="0"  Text="{Binding Path=Name}" Style="{DynamicResource TextH1}" />
                                            <TextBlock Grid.Row="1" Grid.Column="0" Text="{Binding Path=Artist}" Style="{DynamicResource TitlePlayList}"/>
                                            <TextBlock Grid.Row="2" Grid.Column="0" Text="{Binding Path=Duration}"  Style="{DynamicResource ColVo}" />

                                            <Button  Grid.Column="2" Grid.Row="0"  Style="{DynamicResource But}" Command="{Binding DataContext.Description, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" 
                                                     CommandParameter="{Binding Id}" IsEnabled="{Binding DataContext.CanDeleteItem  , RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                                                <materialDesign:PackIcon Kind="AboutCircle" Style="{DynamicResource AddCircleIconStyle}"/>
                                            </Button>

                                            <Button  Grid.Column="2" Grid.Row="1"  Style="{DynamicResource But}" Command="{Binding DataContext.OpenSelectPlaylistToAddViewModel, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" 
                                                    CommandParameter="{Binding Id}" 
                                                    IsEnabled="{Binding DataContext.CanDeleteItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                                                <materialDesign:PackIcon Kind="FormatListGroupPlus" Style="{DynamicResource AddCircleIconStyleAdd}"/>
                                            </Button>
                                            <Button  Grid.Column="2" Grid.Row="3"  Style="{DynamicResource But}" Command="{Binding DataContext.AddMusicInUserList, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}" 
                                                    CommandParameter="{Binding Id}" 
                                                    IsEnabled="{Binding DataContext.CanDeleteItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}}">
                                                <materialDesign:PackIcon Kind="Heart" Style="{DynamicResource AddCircleIconStyleAdd}"/>
                                            </Button>
                                        </Grid>
                                    </Grid>
                                </Grid>
                            </StackPanel>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="PreviewMouseDoubleClick">
                            <i:InvokeCommandAction Command="{Binding DoubleClickCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                </ListBox>
                <Grid Grid.Column="1" VerticalAlignment="Top" Margin="2, 20, 2,0">
                    <TextBox BorderThickness="2"
                         BorderBrush="Black"
                         Height="40" 
                         FontSize="18"         
                         Foreground="MediumPurple"
                         Text="{Binding SearchString, UpdateSourceTrigger=PropertyChanged}"/>
                </Grid>

            </Grid>
        </Grid>
    </Border>
</Page>
